{
  "address": "0xC6BAE150cafb472C7cBE2f577aD2c32aA749D26F",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract TransferProxy",
          "name": "_transferProxy",
          "type": "address"
        },
        {
          "internalType": "contract TransferProxyForDeprecated",
          "name": "_transferProxyForDeprecated",
          "type": "address"
        },
        {
          "internalType": "contract ERC20TransferProxy",
          "name": "_erc20TransferProxy",
          "type": "address"
        },
        {
          "internalType": "contract ExchangeStateV1",
          "name": "_state",
          "type": "address"
        },
        {
          "internalType": "contract ExchangeOrdersHolderV1",
          "name": "_ordersHolder",
          "type": "address"
        },
        {
          "internalType": "address payable",
          "name": "_beneficiary",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_buyerFeeSigner",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sellToken",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "sellTokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "sellValue",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "buyToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "buyTokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "buyValue",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "buyer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "salt",
          "type": "uint256"
        }
      ],
      "name": "Buy",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sellToken",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "sellTokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "buyToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "buyTokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "salt",
          "type": "uint256"
        }
      ],
      "name": "Cancel",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "beneficiary",
      "outputs": [
        {
          "internalType": "address payable",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "buyerFeeSigner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "salt",
              "type": "uint256"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "token",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "tokenId",
                  "type": "uint256"
                },
                {
                  "internalType": "enum ExchangeDomainV1.AssetType",
                  "name": "assetType",
                  "type": "uint8"
                }
              ],
              "internalType": "struct ExchangeDomainV1.Asset",
              "name": "sellAsset",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "token",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "tokenId",
                  "type": "uint256"
                },
                {
                  "internalType": "enum ExchangeDomainV1.AssetType",
                  "name": "assetType",
                  "type": "uint8"
                }
              ],
              "internalType": "struct ExchangeDomainV1.Asset",
              "name": "buyAsset",
              "type": "tuple"
            }
          ],
          "internalType": "struct ExchangeDomainV1.OrderKey",
          "name": "key",
          "type": "tuple"
        }
      ],
      "name": "cancel",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "erc20TransferProxy",
      "outputs": [
        {
          "internalType": "contract ERC20TransferProxy",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "owner",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "salt",
                  "type": "uint256"
                },
                {
                  "components": [
                    {
                      "internalType": "address",
                      "name": "token",
                      "type": "address"
                    },
                    {
                      "internalType": "uint256",
                      "name": "tokenId",
                      "type": "uint256"
                    },
                    {
                      "internalType": "enum ExchangeDomainV1.AssetType",
                      "name": "assetType",
                      "type": "uint8"
                    }
                  ],
                  "internalType": "struct ExchangeDomainV1.Asset",
                  "name": "sellAsset",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "address",
                      "name": "token",
                      "type": "address"
                    },
                    {
                      "internalType": "uint256",
                      "name": "tokenId",
                      "type": "uint256"
                    },
                    {
                      "internalType": "enum ExchangeDomainV1.AssetType",
                      "name": "assetType",
                      "type": "uint8"
                    }
                  ],
                  "internalType": "struct ExchangeDomainV1.Asset",
                  "name": "buyAsset",
                  "type": "tuple"
                }
              ],
              "internalType": "struct ExchangeDomainV1.OrderKey",
              "name": "key",
              "type": "tuple"
            },
            {
              "internalType": "uint256",
              "name": "selling",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "buying",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "sellerFee",
              "type": "uint256"
            }
          ],
          "internalType": "struct ExchangeDomainV1.Order",
          "name": "order",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "uint8",
              "name": "v",
              "type": "uint8"
            },
            {
              "internalType": "bytes32",
              "name": "r",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "s",
              "type": "bytes32"
            }
          ],
          "internalType": "struct ExchangeDomainV1.Sig",
          "name": "sig",
          "type": "tuple"
        },
        {
          "internalType": "uint256",
          "name": "buyerFee",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "uint8",
              "name": "v",
              "type": "uint8"
            },
            {
              "internalType": "bytes32",
              "name": "r",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "s",
              "type": "bytes32"
            }
          ],
          "internalType": "struct ExchangeDomainV1.Sig",
          "name": "buyerFeeSig",
          "type": "tuple"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "buyer",
          "type": "address"
        }
      ],
      "name": "exchange",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ordersHolder",
      "outputs": [
        {
          "internalType": "contract ExchangeOrdersHolderV1",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "owner",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "salt",
                  "type": "uint256"
                },
                {
                  "components": [
                    {
                      "internalType": "address",
                      "name": "token",
                      "type": "address"
                    },
                    {
                      "internalType": "uint256",
                      "name": "tokenId",
                      "type": "uint256"
                    },
                    {
                      "internalType": "enum ExchangeDomainV1.AssetType",
                      "name": "assetType",
                      "type": "uint8"
                    }
                  ],
                  "internalType": "struct ExchangeDomainV1.Asset",
                  "name": "sellAsset",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "address",
                      "name": "token",
                      "type": "address"
                    },
                    {
                      "internalType": "uint256",
                      "name": "tokenId",
                      "type": "uint256"
                    },
                    {
                      "internalType": "enum ExchangeDomainV1.AssetType",
                      "name": "assetType",
                      "type": "uint8"
                    }
                  ],
                  "internalType": "struct ExchangeDomainV1.Asset",
                  "name": "buyAsset",
                  "type": "tuple"
                }
              ],
              "internalType": "struct ExchangeDomainV1.OrderKey",
              "name": "key",
              "type": "tuple"
            },
            {
              "internalType": "uint256",
              "name": "selling",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "buying",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "sellerFee",
              "type": "uint256"
            }
          ],
          "internalType": "struct ExchangeDomainV1.Order",
          "name": "order",
          "type": "tuple"
        },
        {
          "internalType": "uint256",
          "name": "fee",
          "type": "uint256"
        }
      ],
      "name": "prepareBuyerFeeMessage",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "owner",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "salt",
                  "type": "uint256"
                },
                {
                  "components": [
                    {
                      "internalType": "address",
                      "name": "token",
                      "type": "address"
                    },
                    {
                      "internalType": "uint256",
                      "name": "tokenId",
                      "type": "uint256"
                    },
                    {
                      "internalType": "enum ExchangeDomainV1.AssetType",
                      "name": "assetType",
                      "type": "uint8"
                    }
                  ],
                  "internalType": "struct ExchangeDomainV1.Asset",
                  "name": "sellAsset",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "address",
                      "name": "token",
                      "type": "address"
                    },
                    {
                      "internalType": "uint256",
                      "name": "tokenId",
                      "type": "uint256"
                    },
                    {
                      "internalType": "enum ExchangeDomainV1.AssetType",
                      "name": "assetType",
                      "type": "uint8"
                    }
                  ],
                  "internalType": "struct ExchangeDomainV1.Asset",
                  "name": "buyAsset",
                  "type": "tuple"
                }
              ],
              "internalType": "struct ExchangeDomainV1.OrderKey",
              "name": "key",
              "type": "tuple"
            },
            {
              "internalType": "uint256",
              "name": "selling",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "buying",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "sellerFee",
              "type": "uint256"
            }
          ],
          "internalType": "struct ExchangeDomainV1.Order",
          "name": "order",
          "type": "tuple"
        }
      ],
      "name": "prepareMessage",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "newBeneficiary",
          "type": "address"
        }
      ],
      "name": "setBeneficiary",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newBuyerFeeSigner",
          "type": "address"
        }
      ],
      "name": "setBuyerFeeSigner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "state",
      "outputs": [
        {
          "internalType": "contract ExchangeStateV1",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "transferProxy",
      "outputs": [
        {
          "internalType": "contract TransferProxy",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "transferProxyForDeprecated",
      "outputs": [
        {
          "internalType": "contract TransferProxyForDeprecated",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xb0e867e182bb6eb8891b540a953da68c15ad5eba89bf1d1e552746b82259bb79",
  "receipt": {
    "to": null,
    "from": "0x8D5BE0CF7a4FA0680AFF798516c259AC0eE57334",
    "contractAddress": "0xC6BAE150cafb472C7cBE2f577aD2c32aA749D26F",
    "transactionIndex": 35,
    "gasUsed": "2232828",
    "logsBloom": "0x
    "blockHash": "0x2e90fd48c8cc8b6189c04852f7ea475d6126ae395a63b541e14e943b0d2b553b",
    "transactionHash": "0xb0e867e182bb6eb8891b540a953da68c15ad5eba89bf1d1e552746b82259bb79",
    "logs": [
      {
        "transactionIndex": 35,
        "blockNumber": 9382598,
        "transactionHash": "0xb0e867e182bb6eb8891b540a953da68c15ad5eba89bf1d1e552746b82259bb79",
        "address": "0xC6BAE150cafb472C7cBE2f577aD2c32aA749D26F",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000008d5be0cf7a4fa0680aff798516c259ac0ee57334"
        ],
        "data": "0x",
        "logIndex": 108,
        "blockHash": "0x2e90fd48c8cc8b6189c04852f7ea475d6126ae395a63b541e14e943b0d2b553b"
      }
    ],
    "blockNumber": 9382598,
    "cumulativeGasUsed": "7270471",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x1ff9d91B940d552acE0f1a7A6e3c1c04b87B725d",
    "0xD103716753aBe5c51a95Abb4C30fF426a16A5224",
    "0x03252f5C04f9b4Bc55A9994CbE8Eff5BA8041dF2",
    "0x44C6351144E34D1A0A527bf5e2c23bf13F9Cf534",
    "0x8e81E2f40ff2C88676C157308a4a26EDf00D1f92",
    "0x8D5BE0CF7a4FA0680AFF798516c259AC0eE57334",
    "0x8D5BE0CF7a4FA0680AFF798516c259AC0eE57334"
  ],
  "solcInputHash": "1d744ab9c9d10f5943f429fe3641b18d",
  "metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract TransferProxy\",\"name\":\"_transferProxy\",\"type\":\"address\"},{\"internalType\":\"contract TransferProxyForDeprecated\",\"name\":\"_transferProxyForDeprecated\",\"type\":\"address\"},{\"internalType\":\"contract ERC20TransferProxy\",\"name\":\"_erc20TransferProxy\",\"type\":\"address\"},{\"internalType\":\"contract ExchangeStateV1\",\"name\":\"_state\",\"type\":\"address\"},{\"internalType\":\"contract ExchangeOrdersHolderV1\",\"name\":\"_ordersHolder\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"_beneficiary\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_buyerFeeSigner\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sellToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"sellTokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sellValue\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"buyToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"buyTokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"buyValue\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"salt\",\"type\":\"uint256\"}],\"name\":\"Buy\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sellToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"sellTokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"buyToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"buyTokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"salt\",\"type\":\"uint256\"}],\"name\":\"Cancel\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"beneficiary\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyerFeeSigner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"salt\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"enum ExchangeDomainV1.AssetType\",\"name\":\"assetType\",\"type\":\"uint8\"}],\"internalType\":\"struct ExchangeDomainV1.Asset\",\"name\":\"sellAsset\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"enum ExchangeDomainV1.AssetType\",\"name\":\"assetType\",\"type\":\"uint8\"}],\"internalType\":\"struct ExchangeDomainV1.Asset\",\"name\":\"buyAsset\",\"type\":\"tuple\"}],\"internalType\":\"struct ExchangeDomainV1.OrderKey\",\"name\":\"key\",\"type\":\"tuple\"}],\"name\":\"cancel\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"erc20TransferProxy\",\"outputs\":[{\"internalType\":\"contract ERC20TransferProxy\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"salt\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"enum ExchangeDomainV1.AssetType\",\"name\":\"assetType\",\"type\":\"uint8\"}],\"internalType\":\"struct ExchangeDomainV1.Asset\",\"name\":\"sellAsset\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"enum ExchangeDomainV1.AssetType\",\"name\":\"assetType\",\"type\":\"uint8\"}],\"internalType\":\"struct ExchangeDomainV1.Asset\",\"name\":\"buyAsset\",\"type\":\"tuple\"}],\"internalType\":\"struct ExchangeDomainV1.OrderKey\",\"name\":\"key\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"selling\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"buying\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sellerFee\",\"type\":\"uint256\"}],\"internalType\":\"struct ExchangeDomainV1.Order\",\"name\":\"order\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"internalType\":\"struct ExchangeDomainV1.Sig\",\"name\":\"sig\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"buyerFee\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"internalType\":\"struct ExchangeDomainV1.Sig\",\"name\":\"buyerFeeSig\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"}],\"name\":\"exchange\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ordersHolder\",\"outputs\":[{\"internalType\":\"contract ExchangeOrdersHolderV1\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"salt\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"enum ExchangeDomainV1.AssetType\",\"name\":\"assetType\",\"type\":\"uint8\"}],\"internalType\":\"struct ExchangeDomainV1.Asset\",\"name\":\"sellAsset\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"enum ExchangeDomainV1.AssetType\",\"name\":\"assetType\",\"type\":\"uint8\"}],\"internalType\":\"struct ExchangeDomainV1.Asset\",\"name\":\"buyAsset\",\"type\":\"tuple\"}],\"internalType\":\"struct ExchangeDomainV1.OrderKey\",\"name\":\"key\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"selling\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"buying\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sellerFee\",\"type\":\"uint256\"}],\"internalType\":\"struct ExchangeDomainV1.Order\",\"name\":\"order\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"prepareBuyerFeeMessage\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"salt\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"enum ExchangeDomainV1.AssetType\",\"name\":\"assetType\",\"type\":\"uint8\"}],\"internalType\":\"struct ExchangeDomainV1.Asset\",\"name\":\"sellAsset\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"enum ExchangeDomainV1.AssetType\",\"name\":\"assetType\",\"type\":\"uint8\"}],\"internalType\":\"struct ExchangeDomainV1.Asset\",\"name\":\"buyAsset\",\"type\":\"tuple\"}],\"internalType\":\"struct ExchangeDomainV1.OrderKey\",\"name\":\"key\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"selling\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"buying\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sellerFee\",\"type\":\"uint256\"}],\"internalType\":\"struct ExchangeDomainV1.Order\",\"name\":\"order\",\"type\":\"tuple\"}],\"name\":\"prepareMessage\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"newBeneficiary\",\"type\":\"address\"}],\"name\":\"setBeneficiary\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newBuyerFeeSigner\",\"type\":\"address\"}],\"name\":\"setBuyerFeeSigner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"state\",\"outputs\":[{\"internalType\":\"contract ExchangeStateV1\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transferProxy\",\"outputs\":[{\"internalType\":\"contract TransferProxy\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transferProxyForDeprecated\",\"outputs\":[{\"internalType\":\"contract TransferProxyForDeprecated\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/exchange/ExchangeV1.sol\":\"ExchangeV1\"},\"evmVersion\":\"istanbul\",\"libraries\":{\":__CACHE_BREAKER__\":\"0x00000000d41867734bbee4c6863d9255b2b06ac1\"},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":800},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\",\"keccak256\":\"0x15e2d5bd4c28a88548074c54d220e8086f638a71ed07e6b3ba5a70066fcf458d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts may inherit from this and call {_registerInterface} to declare\\n * their support of an interface.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /*\\n     * bytes4(keccak256('supportsInterface(bytes4)')) == 0x01ffc9a7\\n     */\\n    bytes4 private constant _INTERFACE_ID_ERC165 = 0x01ffc9a7;\\n\\n    /**\\n     * @dev Mapping of interface ids to whether or not it's supported.\\n     */\\n    mapping(bytes4 => bool) private _supportedInterfaces;\\n\\n    constructor () internal {\\n        // Derived contracts need only register support for their own interfaces,\\n        // we register support for ERC165 itself here\\n        _registerInterface(_INTERFACE_ID_ERC165);\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     *\\n     * Time complexity O(1), guaranteed to always use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return _supportedInterfaces[interfaceId];\\n    }\\n\\n    /**\\n     * @dev Registers the contract as an implementer of the interface defined by\\n     * `interfaceId`. Support of the actual ERC165 interface is automatic and\\n     * registering its interface id is not required.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     *\\n     * Requirements:\\n     *\\n     * - `interfaceId` cannot be the ERC165 invalid interface (`0xffffffff`).\\n     */\\n    function _registerInterface(bytes4 interfaceId) internal virtual {\\n        require(interfaceId != 0xffffffff, \\\"ERC165: invalid interface id\\\");\\n        _supportedInterfaces[interfaceId] = true;\\n    }\\n}\\n\",\"keccak256\":\"0x24141d2f6b98d4cb77a8936eae8cbaad2e261d9062bdc08036096f4550092501\",\"license\":\"MIT\"},\"@openzeppelin/contracts/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xf70bc25d981e4ec9673a995ad2995d5d493ea188d3d8f388bba9c227ce09fb82\",\"license\":\"MIT\"},\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0xcc78a17dd88fa5a2edc60c8489e2f405c0913b377216a5b26b35656b2d0dab52\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\nimport \\\"../../introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(address indexed operator, address indexed from, address indexed to, uint256[] ids, uint256[] values);\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids) external view returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 id, uint256 amount, bytes calldata data) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(address from, address to, uint256[] calldata ids, uint256[] calldata amounts, bytes calldata data) external;\\n}\\n\",\"keccak256\":\"0x61321d2c86346045bf394885ee3afeecc65f9daad2694bc19110967588fd7b5d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x5f02220344881ce43204ae4a6281145a67bc52c2bb1290a791857df3d19d78f5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\nimport \\\"../../introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n      * @dev Safely transfers `tokenId` token from `from` to `to`.\\n      *\\n      * Requirements:\\n      *\\n      * - `from` cannot be the zero address.\\n      * - `to` cannot be the zero address.\\n      * - `tokenId` token must exist and be owned by `from`.\\n      * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n      * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n      *\\n      * Emits a {Transfer} event.\\n      */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n}\\n\",\"keccak256\":\"0x2d99a0deb6648c34fbc66d6ac4a2d64798d7a5321b45624f6736fadc63da1962\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x8d3cb350f04ff49cfb10aef08d87f19dcbaecc8027b0bed12f3275cd12f38cf0\",\"license\":\"MIT\"},\"contracts/exchange/ExchangeDomainV1.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity =0.7.6;\\n\\ncontract ExchangeDomainV1 {\\n\\n    enum AssetType {NO_USE, ETH, ERC20, ERC1155, ERC721, ERC721Deprecated}\\n\\n    struct Asset {\\n        address token;\\n        uint tokenId;\\n        AssetType assetType;\\n    }\\n\\n    struct OrderKey {\\n        /* who signed the order */\\n        address owner;\\n        /* random number */\\n        uint salt;\\n\\n        /* what has owner */\\n        Asset sellAsset;\\n\\n        /* what wants owner */\\n        Asset buyAsset;\\n    }\\n\\n    struct Order {\\n        OrderKey key;\\n\\n        /* how much has owner (in wei, or UINT256_MAX if ERC-721) */\\n        uint selling;\\n        /* how much wants owner (in wei, or UINT256_MAX if ERC-721) */\\n        uint buying;\\n\\n        /* fee for selling */\\n        uint sellerFee;\\n    }\\n\\n    /* An ECDSA signature. */\\n    struct Sig {\\n        /* v parameter */\\n        uint8 v;\\n        /* r parameter */\\n        bytes32 r;\\n        /* s parameter */\\n        bytes32 s;\\n    }\\n}\",\"keccak256\":\"0x121eb08a5a373a7baa898f30c0888bdb06673117aa79e57d4b38b21259a25bce\",\"license\":\"MIT\"},\"contracts/exchange/ExchangeOrdersHolderV1.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity =0.7.6;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./ExchangeDomainV1.sol\\\";\\n\\ncontract ExchangeOrdersHolderV1 {\\n\\n    mapping(bytes32 => OrderParams) internal orders;\\n\\n    struct OrderParams {\\n        /* how much has owner (in wei, or UINT256_MAX if ERC-721) */\\n        uint selling;\\n        /* how much wants owner (in wei, or UINT256_MAX if ERC-721) */\\n        uint buying;\\n\\n        /* fee for selling */\\n        uint sellerFee;\\n    }\\n\\n    function add(ExchangeDomainV1.Order calldata order) external {\\n        require(msg.sender == order.key.owner, \\\"order could be added by owner only\\\");\\n        bytes32 key = prepareKey(order);\\n        orders[key] = OrderParams(order.selling, order.buying, order.sellerFee);\\n    }\\n\\n    function exists(ExchangeDomainV1.Order calldata order) external view returns (bool) {\\n        bytes32 key = prepareKey(order);\\n        OrderParams memory params = orders[key];\\n        return params.buying == order.buying && params.selling == order.selling && params.sellerFee == order.sellerFee;\\n    }\\n\\n    function prepareKey(ExchangeDomainV1.Order memory order) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n                order.key.sellAsset.token,\\n                order.key.sellAsset.tokenId,\\n                order.key.owner,\\n                order.key.buyAsset.token,\\n                order.key.buyAsset.tokenId,\\n                order.key.salt\\n            ));\\n    }\\n}\",\"keccak256\":\"0x633d403a773383371e1661e48537b7c9a9bdb5473d54a8450ebd148779af20a1\",\"license\":\"MIT\"},\"contracts/exchange/ExchangeStateV1.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity =0.7.6;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../role/OwnableOperatorRole.sol\\\";\\nimport \\\"./ExchangeDomainV1.sol\\\";\\n\\ncontract ExchangeStateV1 is OwnableOperatorRole {\\n\\n    // keccak256(OrderKey) => completed\\n    mapping(bytes32 => uint256) public completed;\\n\\n    function getCompleted(ExchangeDomainV1.OrderKey calldata key) view external returns (uint256) {\\n        return completed[getCompletedKey(key)];\\n    }\\n\\n    function setCompleted(ExchangeDomainV1.OrderKey calldata key, uint256 newCompleted) external onlyOperator {\\n        completed[getCompletedKey(key)] = newCompleted;\\n    }\\n\\n    function getCompletedKey(ExchangeDomainV1.OrderKey memory key) pure public returns (bytes32) {\\n        return keccak256(abi.encodePacked(key.owner, key.sellAsset.token, key.sellAsset.tokenId, key.buyAsset.token, key.buyAsset.tokenId, key.salt));\\n    }\\n}\",\"keccak256\":\"0x8f6dacebf40e4f77959a3d939f217c65a1230c1fea83fbc42ca244dbc5c97cd4\",\"license\":\"MIT\"},\"contracts/exchange/ExchangeV1.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity =0.7.6;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\\\";\\n\\nimport \\\"./ExchangeDomainV1.sol\\\";\\nimport \\\"./ExchangeStateV1.sol\\\";\\nimport \\\"./ExchangeOrdersHolderV1.sol\\\";\\nimport \\\"../tokens/HasSecondarySaleFees.sol\\\";\\nimport \\\"../utils/Bytes.sol\\\";\\nimport \\\"../utils/String.sol\\\";\\nimport \\\"../utils/Uint.sol\\\";\\nimport \\\"../proxy/ERC20TransferProxy.sol\\\";\\nimport \\\"../proxy/TransferProxy.sol\\\";\\nimport \\\"../proxy/TransferProxyForDeprecated.sol\\\";\\n\\n\\n\\ncontract ExchangeV1 is Ownable, ExchangeDomainV1 {\\n    using SafeMath for uint;\\n    using UintLibrary for uint;\\n    using StringLibrary for string;\\n    using BytesLibrary for bytes32;\\n\\n    enum FeeSide {NONE, SELL, BUY}\\n\\n    event Buy(\\n        address indexed sellToken, uint256 indexed sellTokenId, uint256 sellValue,\\n        address owner,\\n        address buyToken, uint256 buyTokenId, uint256 buyValue,\\n        address buyer,\\n        uint256 amount,\\n        uint256 salt\\n    );\\n\\n    event Cancel(\\n        address indexed sellToken, uint256 indexed sellTokenId,\\n        address owner,\\n        address buyToken, uint256 buyTokenId,\\n        uint256 salt\\n    );\\n\\n    bytes4 private constant _INTERFACE_ID_FEES = 0xb7799584;\\n    uint256 private constant UINT256_MAX = 2 ** 256 - 1;\\n\\n    address payable public beneficiary;\\n    address public buyerFeeSigner;\\n\\n    TransferProxy public transferProxy;\\n    TransferProxyForDeprecated public transferProxyForDeprecated;\\n    ERC20TransferProxy public erc20TransferProxy;\\n    ExchangeStateV1 public state;\\n    ExchangeOrdersHolderV1 public ordersHolder;\\n\\n    constructor(\\n        TransferProxy _transferProxy, TransferProxyForDeprecated _transferProxyForDeprecated, ERC20TransferProxy _erc20TransferProxy, ExchangeStateV1 _state,\\n        ExchangeOrdersHolderV1 _ordersHolder, address payable _beneficiary, address _buyerFeeSigner\\n    ) {\\n        transferProxy = _transferProxy;\\n        transferProxyForDeprecated = _transferProxyForDeprecated;\\n        erc20TransferProxy = _erc20TransferProxy;\\n        state = _state;\\n        ordersHolder = _ordersHolder;\\n        beneficiary = _beneficiary;\\n        buyerFeeSigner = _buyerFeeSigner;\\n    }\\n\\n    function setBeneficiary(address payable newBeneficiary) external onlyOwner {\\n        beneficiary = newBeneficiary;\\n    }\\n\\n    function setBuyerFeeSigner(address newBuyerFeeSigner) external onlyOwner {\\n        buyerFeeSigner = newBuyerFeeSigner;\\n    }\\n\\n    function exchange(\\n        Order calldata order,\\n        Sig calldata sig,\\n        uint buyerFee,\\n        Sig calldata buyerFeeSig,\\n        uint amount,\\n        address buyer\\n    ) payable external {\\n        validateOrderSig(order, sig);\\n        validateBuyerFeeSig(order, buyerFee, buyerFeeSig);\\n        uint paying = order.buying.mul(amount).div(order.selling);\\n        verifyOpenAndModifyOrderState(order.key, order.selling, amount);\\n        require(order.key.sellAsset.assetType != AssetType.ETH, \\\"ETH is not supported on sell side\\\");\\n        if (order.key.buyAsset.assetType == AssetType.ETH) {\\n            validateEthTransfer(paying, buyerFee);\\n        }\\n        FeeSide feeSide = getFeeSide(order.key.sellAsset.assetType, order.key.buyAsset.assetType);\\n        if (buyer == address(0x0)) {\\n            buyer = msg.sender;\\n        }\\n        transferWithFeesPossibility(order.key.sellAsset, amount, order.key.owner, buyer, feeSide == FeeSide.SELL, buyerFee, order.sellerFee, order.key.buyAsset);\\n        transferWithFeesPossibility(order.key.buyAsset, paying, msg.sender, order.key.owner, feeSide == FeeSide.BUY, order.sellerFee, buyerFee, order.key.sellAsset);\\n        emitBuy(order, amount, buyer);\\n    }\\n\\n    function validateEthTransfer(uint value, uint buyerFee) internal view {\\n        uint256 buyerFeeValue = value.bp(buyerFee);\\n        require(msg.value == value + buyerFeeValue, \\\"msg.value is incorrect\\\");\\n    }\\n\\n    function cancel(OrderKey calldata key) external {\\n        require(key.owner == msg.sender, \\\"not an owner\\\");\\n        state.setCompleted(key, UINT256_MAX);\\n        emit Cancel(key.sellAsset.token, key.sellAsset.tokenId, msg.sender, key.buyAsset.token, key.buyAsset.tokenId, key.salt);\\n    }\\n\\n    function validateOrderSig(\\n        Order memory order,\\n        Sig memory sig\\n    ) internal view {\\n        if (sig.v == 0 && sig.r == bytes32(0x0) && sig.s == bytes32(0x0)) {\\n            require(ordersHolder.exists(order), \\\"incorrect signature\\\");\\n        } else {\\n            require(prepareMessage(order).recover(sig.v, sig.r, sig.s) == order.key.owner, \\\"incorrect signature\\\");\\n        }\\n    }\\n\\n    function validateBuyerFeeSig(\\n        Order memory order,\\n        uint buyerFee,\\n        Sig memory sig\\n    ) internal view {\\n        require(prepareBuyerFeeMessage(order, buyerFee).recover(sig.v, sig.r, sig.s) == buyerFeeSigner, \\\"incorrect buyer fee signature\\\");\\n    }\\n\\n    function prepareBuyerFeeMessage(Order memory order, uint fee) public pure returns (string memory) {\\n        return keccak256(abi.encode(order, fee)).toString();\\n    }\\n\\n    function prepareMessage(Order memory order) public pure returns (string memory) {\\n        return keccak256(abi.encode(order)).toString();\\n    }\\n\\n    function transferWithFeesPossibility(Asset memory firstType, uint value, address from, address to, bool hasFee, uint256 sellerFee, uint256 buyerFee, Asset memory secondType) internal {\\n        if (!hasFee) {\\n            transfer(firstType, value, from, to);\\n        } else {\\n            transferWithFees(firstType, value, from, to, sellerFee, buyerFee, secondType);\\n        }\\n    }\\n\\n    function transfer(Asset memory asset, uint value, address from, address to) internal {\\n        if (asset.assetType == AssetType.ETH) {\\n            address payable toPayable = address(uint160(to));\\n            toPayable.transfer(value);\\n        } else if (asset.assetType == AssetType.ERC20) {\\n            require(asset.tokenId == 0, \\\"tokenId should be 0\\\");\\n            erc20TransferProxy.erc20safeTransferFrom(IERC20(asset.token), from, to, value);\\n        } else if (asset.assetType == AssetType.ERC721) {\\n            require(value == 1, \\\"value should be 1 for ERC-721\\\");\\n            transferProxy.erc721safeTransferFrom(IERC721(asset.token), from, to, asset.tokenId);\\n        } else if (asset.assetType == AssetType.ERC721Deprecated) {\\n            require(value == 1, \\\"value should be 1 for ERC-721\\\");\\n            transferProxyForDeprecated.erc721TransferFrom(IERC721(asset.token), from, to, asset.tokenId);\\n        } else {\\n            transferProxy.erc1155safeTransferFrom(IERC1155(asset.token), from, to, asset.tokenId, value, \\\"\\\");\\n        }\\n    }\\n\\n    function transferWithFees(Asset memory firstType, uint value, address from, address to, uint256 sellerFee, uint256 buyerFee, Asset memory secondType) internal {\\n        uint restValue = transferFeeToBeneficiary(firstType, from, value, sellerFee, buyerFee);\\n        if (\\n            secondType.assetType == AssetType.ERC1155 && IERC1155(secondType.token).supportsInterface(_INTERFACE_ID_FEES) ||\\n            (secondType.assetType == AssetType.ERC721 || secondType.assetType == AssetType.ERC721Deprecated) && IERC721(secondType.token).supportsInterface(_INTERFACE_ID_FEES)\\n        ) {\\n            HasSecondarySaleFees withFees = HasSecondarySaleFees(secondType.token);\\n            address payable[] memory recipients = withFees.getFeeRecipients(secondType.tokenId);\\n            uint[] memory fees = withFees.getFeeBps(secondType.tokenId);\\n            require(fees.length == recipients.length);\\n            for (uint256 i = 0; i < fees.length; i++) {\\n                (uint newRestValue, uint current) = subFeeInBp(restValue, value, fees[i]);\\n                restValue = newRestValue;\\n                transfer(firstType, current, from, recipients[i]);\\n            }\\n        }\\n        address payable toPayable = address(uint160(to));\\n        transfer(firstType, restValue, from, toPayable);\\n    }\\n\\n    function transferFeeToBeneficiary(Asset memory asset, address from, uint total, uint sellerFee, uint buyerFee) internal returns (uint) {\\n        (uint restValue, uint sellerFeeValue) = subFeeInBp(total, total, sellerFee);\\n        uint buyerFeeValue = total.bp(buyerFee);\\n        uint beneficiaryFee = buyerFeeValue.add(sellerFeeValue);\\n        if (beneficiaryFee > 0) {\\n            transfer(asset, beneficiaryFee, from, beneficiary);\\n        }\\n        return restValue;\\n    }\\n\\n    function emitBuy(Order memory order, uint amount, address buyer) internal {\\n        emit Buy(order.key.sellAsset.token, order.key.sellAsset.tokenId, order.selling,\\n            order.key.owner,\\n            order.key.buyAsset.token, order.key.buyAsset.tokenId, order.buying,\\n            buyer,\\n            amount,\\n            order.key.salt\\n        );\\n    }\\n\\n    function subFeeInBp(uint value, uint total, uint feeInBp) internal pure returns (uint newValue, uint realFee) {\\n        return subFee(value, total.bp(feeInBp));\\n    }\\n\\n    function subFee(uint value, uint fee) internal pure returns (uint newValue, uint realFee) {\\n        if (value > fee) {\\n            newValue = value - fee;\\n            realFee = fee;\\n        } else {\\n            newValue = 0;\\n            realFee = value;\\n        }\\n    }\\n\\n    function verifyOpenAndModifyOrderState(OrderKey memory key, uint selling, uint amount) internal {\\n        uint completed = state.getCompleted(key);\\n        uint newCompleted = completed.add(amount);\\n        require(newCompleted <= selling, \\\"not enough stock of order for buying\\\");\\n        state.setCompleted(key, newCompleted);\\n    }\\n\\n    function getFeeSide(AssetType sellType, AssetType buyType) internal pure returns (FeeSide) {\\n        if ((sellType == AssetType.ERC721 || sellType == AssetType.ERC721Deprecated) &&\\n            (buyType == AssetType.ERC721 || buyType == AssetType.ERC721Deprecated)) {\\n            return FeeSide.NONE;\\n        }\\n        if (uint(sellType) > uint(buyType)) {\\n            return FeeSide.BUY;\\n        }\\n        return FeeSide.SELL;\\n    }\\n}\",\"keccak256\":\"0xeaadc903de946fe4cceae5d44f32d37af2b5a4d709f5de0c0c8971d7cc4cd3dd\",\"license\":\"MIT\"},\"contracts/proxy/ERC20TransferProxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity =0.7.6;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nimport \\\"../role/OwnableOperatorRole.sol\\\";\\n\\ncontract ERC20TransferProxy is OwnableOperatorRole {\\n\\n    function erc20safeTransferFrom(IERC20 token, address from, address to, uint256 value) external onlyOperator {\\n        require(token.transferFrom(from, to, value), \\\"failure while transferring\\\");\\n    }\\n}\",\"keccak256\":\"0x2596608cda845c03cc2cbf9b0bc3109eb94c9fb149cb78dd424e593eee560aaf\",\"license\":\"MIT\"},\"contracts/proxy/TransferProxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity =0.7.6;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\\\";\\n\\nimport \\\"../role/OwnableOperatorRole.sol\\\";\\n\\ncontract TransferProxy is OwnableOperatorRole {\\n\\n    function erc721safeTransferFrom(IERC721 token, address from, address to, uint256 tokenId) external onlyOperator {\\n        token.safeTransferFrom(from, to, tokenId);\\n    }\\n\\n    function erc1155safeTransferFrom(IERC1155 token, address from, address to, uint256 id, uint256 value, bytes calldata data) external onlyOperator {\\n        token.safeTransferFrom(from, to, id, value, data);\\n    }\\n}\",\"keccak256\":\"0x6363069604c724c10d6f4ce509c615d75c5428e983db3ebf3588bf88d1ee7a30\",\"license\":\"MIT\"},\"contracts/proxy/TransferProxyForDeprecated.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity =0.7.6;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\n\\nimport \\\"../role/OwnableOperatorRole.sol\\\";\\n\\ncontract TransferProxyForDeprecated is OwnableOperatorRole {\\n\\n    function erc721TransferFrom(IERC721 token, address from, address to, uint256 tokenId) external onlyOperator {\\n        token.transferFrom(from, to, tokenId);\\n    }\\n}\",\"keccak256\":\"0x98459646d52f5bfc44f4109d452dd14be435bd519d40ee7d7209ae2f20948e93\",\"license\":\"MIT\"},\"contracts/role/OperatorRole.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity =0.7.6;\\n\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\n\\nimport \\\"../utils/Roles.sol\\\";\\n\\ncontract OperatorRole is Context {\\n    using Roles for Roles.Role;\\n\\n    event OperatorAdded(address indexed account);\\n    event OperatorRemoved(address indexed account);\\n\\n    Roles.Role private _operators;\\n\\n    modifier onlyOperator() {\\n        require(isOperator(_msgSender()), \\\"OperatorRole: caller does not have the Operator role\\\");\\n        _;\\n    }\\n\\n    function isOperator(address account) public view returns (bool) {\\n        return _operators.has(account);\\n    }\\n\\n    function _addOperator(address account) internal {\\n        _operators.add(account);\\n        emit OperatorAdded(account);\\n    }\\n\\n    function _removeOperator(address account) internal {\\n        _operators.remove(account);\\n        emit OperatorRemoved(account);\\n    }\\n}\\n\",\"keccak256\":\"0x8bc4b18c5474910601aba84f54ec825e5f47751edd09c8d321d6576194f8740b\",\"license\":\"MIT\"},\"contracts/role/OwnableOperatorRole.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity =0.7.6;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\nimport \\\"./OperatorRole.sol\\\";\\n\\ncontract OwnableOperatorRole is Ownable, OperatorRole {\\n    function addOperator(address account) external onlyOwner {\\n        _addOperator(account);\\n    }\\n\\n    function removeOperator(address account) external onlyOwner {\\n        _removeOperator(account);\\n    }\\n}\",\"keccak256\":\"0x81284abbb89084b16a0b09208f998f7a17b510b24d00fc6c4afda1d563fb6e5a\",\"license\":\"MIT\"},\"contracts/tokens/HasSecondarySaleFees.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity =0.7.6;\\n\\nimport \\\"@openzeppelin/contracts/introspection/ERC165.sol\\\";\\n\\nabstract contract HasSecondarySaleFees is ERC165 {\\n\\n    event SecondarySaleFees(uint256 tokenId, address[] recipients, uint[] bps);\\n\\n    /*\\n     * bytes4(keccak256('getFeeBps(uint256)')) == 0x0ebd4c7f\\n     * bytes4(keccak256('getFeeRecipients(uint256)')) == 0xb9c4d9fb\\n     *\\n     * => 0x0ebd4c7f ^ 0xb9c4d9fb == 0xb7799584\\n     */\\n    bytes4 private constant _INTERFACE_ID_FEES = 0xb7799584;\\n\\n    constructor() {\\n        _registerInterface(_INTERFACE_ID_FEES);\\n    }\\n\\n    function getFeeRecipients(uint256 id) external virtual view returns (address payable[] memory);\\n    function getFeeBps(uint256 id) external view virtual returns (uint[] memory);\\n}\",\"keccak256\":\"0xb0ea8cd2bdba8afd4a53d26d3e3f32c321263fef4de2db91d6ef230207e93252\",\"license\":\"MIT\"},\"contracts/utils/Bytes.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity =0.7.6;\\n\\nlibrary BytesLibrary {\\n    function toString(bytes32 value) internal pure returns (string memory) {\\n        bytes memory alphabet = \\\"0123456789abcdef\\\";\\n        bytes memory str = new bytes(64);\\n        for (uint256 i = 0; i < 32; i++) {\\n            str[i*2] = alphabet[uint8(value[i] >> 4)];\\n            str[1+i*2] = alphabet[uint8(value[i] & 0x0f)];\\n        }\\n        return string(str);\\n    }\\n}\",\"keccak256\":\"0x17adafbe3ec8bd3b0a370b363a500f980f3be6d56a446dd6dbd36cb3ac6bc2bd\",\"license\":\"MIT\"},\"contracts/utils/Roles.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity =0.7.6;\\n\\nlibrary Roles {\\n    struct Role {\\n        mapping (address => bool) bearer;\\n    }\\n\\n    /**\\n     * @dev Give an account access to this role.\\n     */\\n    function add(Role storage role, address account) internal {\\n        require(!has(role, account), \\\"Roles: account already has role\\\");\\n        role.bearer[account] = true;\\n    }\\n\\n    /**\\n     * @dev Remove an account's access to this role.\\n     */\\n    function remove(Role storage role, address account) internal {\\n        require(has(role, account), \\\"Roles: account does not have role\\\");\\n        role.bearer[account] = false;\\n    }\\n\\n    /**\\n     * @dev Check if an account has this role.\\n     * @return bool\\n     */\\n    function has(Role storage role, address account) internal view returns (bool) {\\n        require(account != address(0), \\\"Roles: account is the zero address\\\");\\n        return role.bearer[account];\\n    }\\n}\",\"keccak256\":\"0x821238c60400a827d760a36a785ae6e35de09b116722948ee267b40a30d84a6f\",\"license\":\"MIT\"},\"contracts/utils/String.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity =0.7.6;\\n\\nimport \\\"./Uint.sol\\\";\\n\\nlibrary StringLibrary {\\n    using UintLibrary for uint256;\\n\\n    function append(string memory a, string memory b) internal pure returns (string memory) {\\n        bytes memory ba = bytes(a);\\n        bytes memory bb = bytes(b);\\n        bytes memory bab = new bytes(ba.length + bb.length);\\n        uint k = 0;\\n        for (uint i = 0; i < ba.length; i++) bab[k++] = ba[i];\\n        for (uint i = 0; i < bb.length; i++) bab[k++] = bb[i];\\n        return string(bab);\\n    }\\n\\n    function append(string memory a, string memory b, string memory c) internal pure returns (string memory) {\\n        bytes memory ba = bytes(a);\\n        bytes memory bb = bytes(b);\\n        bytes memory bc = bytes(c);\\n        bytes memory bbb = new bytes(ba.length + bb.length + bc.length);\\n        uint k = 0;\\n        for (uint i = 0; i < ba.length; i++) bbb[k++] = ba[i];\\n        for (uint i = 0; i < bb.length; i++) bbb[k++] = bb[i];\\n        for (uint i = 0; i < bc.length; i++) bbb[k++] = bc[i];\\n        return string(bbb);\\n    }\\n\\n    function recover(string memory message, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\\n        bytes memory msgBytes = bytes(message);\\n        bytes memory fullMessage = concat(\\n            bytes(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\"),\\n            bytes(msgBytes.length.toString()),\\n            msgBytes,\\n            new bytes(0), new bytes(0), new bytes(0), new bytes(0)\\n        );\\n        return ecrecover(keccak256(fullMessage), v, r, s);\\n    }\\n\\n    function concat(bytes memory ba, bytes memory bb, bytes memory bc, bytes memory bd, bytes memory be, bytes memory bf, bytes memory bg) internal pure returns (bytes memory) {\\n        bytes memory resultBytes = new bytes(ba.length + bb.length + bc.length + bd.length + be.length + bf.length + bg.length);\\n        uint k = 0;\\n        for (uint i = 0; i < ba.length; i++) resultBytes[k++] = ba[i];\\n        for (uint i = 0; i < bb.length; i++) resultBytes[k++] = bb[i];\\n        for (uint i = 0; i < bc.length; i++) resultBytes[k++] = bc[i];\\n        for (uint i = 0; i < bd.length; i++) resultBytes[k++] = bd[i];\\n        for (uint i = 0; i < be.length; i++) resultBytes[k++] = be[i];\\n        for (uint i = 0; i < bf.length; i++) resultBytes[k++] = bf[i];\\n        for (uint i = 0; i < bg.length; i++) resultBytes[k++] = bg[i];\\n        return resultBytes;\\n    }\\n}\",\"keccak256\":\"0xc16836a719b10a14e13a5138da7ed53df83d8e7211ebaa005580e0c7221ba130\",\"license\":\"MIT\"},\"contracts/utils/Uint.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity =0.7.6;\\n\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\n\\nlibrary UintLibrary {\\n    using SafeMath for uint;\\n\\n    function toString(uint256 i) internal pure returns (string memory) {\\n        if (i == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint j = i;\\n        uint len;\\n        while (j != 0) {\\n            len++;\\n            j /= 10;\\n        }\\n        bytes memory bstr = new bytes(len);\\n        uint k = len - 1;\\n        while (i != 0) {\\n            bstr[k--] = byte(uint8(48 + i % 10));\\n            i /= 10;\\n        }\\n        return string(bstr);\\n    }\\n\\n    function bp(uint value, uint bpValue) internal pure returns (uint) {\\n        return value.mul(bpValue).div(10000);\\n    }\\n}\",\"keccak256\":\"0xa60bb960452d342f54820ecac851eab97a9ddaba0760b42af37d67bfed2b5a9d\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b506040516200261a3803806200261a833981016040819052620000349162000110565b6000620000406200010c565b600080546001600160a01b0319166001600160a01b0383169081178255604051929350917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a350600380546001600160a01b03199081166001600160a01b03998a1617909155600480548216978916979097179096556005805487169588169590951790945560068054861693871693909317909255600780548516918616919091179055600180548416918516919091179055600280549092169216919091179055620001d3565b3390565b600080600080600080600060e0888a0312156200012b578283fd5b87516200013881620001ba565b60208901519097506200014b81620001ba565b60408901519096506200015e81620001ba565b60608901519095506200017181620001ba565b60808901519094506200018481620001ba565b60a08901519093506200019781620001ba565b60c0890151909250620001aa81620001ba565b8091505092959891949750929550565b6001600160a01b0381168114620001d057600080fd5b50565b61243780620001e36000396000f3fe6080604052600436106100f35760003560e01c8063715018a61161008a578063c19d93fb11610059578063c19d93fb14610243578063ca120b1f14610258578063f2fde38b14610278578063fee03e9e14610298576100f3565b8063715018a6146101f15780638da5cb5b146102065780639704dc441461021b5780639cec639214610230576100f3565b806338af3eed116100c657806338af3eed146101925780634df97bc5146101a757806355d5d326146101bc5780636e667db3146101dc576100f3565b806302329e10146100f8578063049944b6146101235780631b4c9874146101505780631c31f71014610170575b600080fd5b34801561010457600080fd5b5061010d6102ad565b60405161011a9190611fa1565b60405180910390f35b34801561012f57600080fd5b5061014361013e366004611e07565b6102bc565b60405161011a9190612078565b34801561015c57600080fd5b5061014361016b366004611e23565b6102f5565b34801561017c57600080fd5b5061019061018b366004611bcd565b610316565b005b34801561019e57600080fd5b5061010d6103ac565b3480156101b357600080fd5b5061010d6103bb565b3480156101c857600080fd5b506101906101d7366004611bcd565b6103ca565b3480156101e857600080fd5b5061010d610460565b3480156101fd57600080fd5b5061019061046f565b34801561021257600080fd5b5061010d61052d565b34801561022757600080fd5b5061010d61053c565b61019061023e366004611d8e565b61054b565b34801561024f57600080fd5b5061010d610753565b34801561026457600080fd5b50610190610273366004611d60565b610762565b34801561028457600080fd5b50610190610293366004611bcd565b610870565b3480156102a457600080fd5b5061010d610984565b6004546001600160a01b031681565b60606102ed826040516020016102d2919061230d565b60405160208183030381529060405280519060200120610993565b90505b919050565b606061030d83836040516020016102d292919061231c565b90505b92915050565b61031e610ab4565b6001600160a01b031661032f61052d565b6001600160a01b03161461038a576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b600180546001600160a01b0319166001600160a01b0392909216919091179055565b6001546001600160a01b031681565b6002546001600160a01b031681565b6103d2610ab4565b6001600160a01b03166103e361052d565b6001600160a01b03161461043e576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b600280546001600160a01b0319166001600160a01b0392909216919091179055565b6003546001600160a01b031681565b610477610ab4565b6001600160a01b031661048861052d565b6001600160a01b0316146104e3576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080546001600160a01b0319169055565b6000546001600160a01b031690565b6007546001600160a01b031681565b61057161055d36889003880188611e07565b61056c36889003880188611e4f565b610ab8565b61059861058336889003880188611e07565b8561059336879003870187611e4f565b610bdf565b60006105b86101008801356105b26101208a013586610c35565b90610c8e565b90506105d86105cc36899003890189611d72565b88610100013585610cf5565b60016105ea60a0890160808a01611d2b565b60058111156105f557fe5b141561061c5760405162461bcd60e51b8152600401610613906121b4565b60405180910390fd5b600161062f610100890160e08a01611d2b565b600581111561063a57fe5b141561064a5761064a8186610e11565b600061067561065f60a08a0160808b01611d2b565b6106706101008b0160e08c01611d2b565b610e40565b90506001600160a01b038316610689573392505b6106df61069e368a90038a0160408b01611d45565b856106ac60208c018c611bcd565b8660018660028111156106bb57fe5b148b8e61014001358f60000160a0018036038101906106da9190611d45565b610ecf565b6107306106f4368a90038a0160a08b01611d45565b833361070360208d018d611bcd565b600286600281111561071157fe5b148d61014001358c8f6000016040018036038101906106da9190611d45565b610749610742368a90038a018a611e07565b8585610ef4565b5050505050505050565b6006546001600160a01b031681565b336107706020830183611bcd565b6001600160a01b0316146107965760405162461bcd60e51b8152600401610613906121f5565b600654604051631d03b74d60e11b81526001600160a01b0390911690633a076e9a906107ca9084906000199060040161229a565b600060405180830381600087803b1580156107e457600080fd5b505af11580156107f8573d6000803e3d6000fd5b50505060608201803591506108109060408401611bcd565b6001600160a01b03167fbfe0e802e586c99960de1a111c80f598b281996d65080d74dbe29986f55b274a3361084b60c0860160a08701611bcd565b60405161086592919060c088013590602089013590611fb5565b60405180910390a350565b610878610ab4565b6001600160a01b031661088961052d565b6001600160a01b0316146108e4576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b6001600160a01b0381166109295760405162461bcd60e51b81526004018080602001828103825260268152602001806123e46026913960400191505060405180910390fd5b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b6005546001600160a01b031681565b604080518082018252601081527f30313233343536373839616263646566000000000000000000000000000000006020820152815182815260608181018452926000919060208201818036833701905050905060005b6020811015610aac57826004868360208110610a0157fe5b1a60f81b6001600160f81b031916901c60f81c60ff1681518110610a2157fe5b602001015160f81c60f81b828260020281518110610a3b57fe5b60200101906001600160f81b031916908160001a90535082858260208110610a5f57fe5b825191901a600f16908110610a7057fe5b602001015160f81c60f81b828260020260010181518110610a8d57fe5b60200101906001600160f81b031916908160001a9053506001016109e9565b509392505050565b3390565b805160ff16158015610acc57506020810151155b8015610ada57506040810151155b15610b8057600754604051632aee7a3160e01b81526001600160a01b0390911690632aee7a3190610b0f90859060040161230d565b60206040518083038186803b158015610b2757600080fd5b505afa158015610b3b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b5f9190611d0b565b610b7b5760405162461bcd60e51b815260040161061390612146565b610bdb565b8160000151600001516001600160a01b0316610bb5826000015183602001518460400151610bad876102bc565b929190610f73565b6001600160a01b031614610bdb5760405162461bcd60e51b815260040161061390612146565b5050565b6002548151602083015160408401516001600160a01b0390931692610c0a929190610bad88886102f5565b6001600160a01b031614610c305760405162461bcd60e51b81526004016106139061217d565b505050565b600082610c4457506000610310565b82820282848281610c5157fe5b041461030d5760405162461bcd60e51b815260040180806020018281038252602181526020018061240a6021913960400191505060405180910390fd5b6000808211610ce4576040805162461bcd60e51b815260206004820152601a60248201527f536166654d6174683a206469766973696f6e206279207a65726f000000000000604482015290519081900360640190fd5b818381610ced57fe5b049392505050565b6006546040516303ec000360e61b81526000916001600160a01b03169063fb0000c090610d269087906004016122ef565b60206040518083038186803b158015610d3e57600080fd5b505afa158015610d52573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d769190611eaf565b90506000610d848284611064565b905083811115610da65760405162461bcd60e51b8152600401610613906120cb565b600654604051631d03b74d60e11b81526001600160a01b0390911690633a076e9a90610dd890889085906004016122fe565b600060405180830381600087803b158015610df257600080fd5b505af1158015610e06573d6000803e3d6000fd5b505050505050505050565b6000610e1d83836110be565b90508083013414610c305760405162461bcd60e51b815260040161061390612263565b60006004836005811115610e5057fe5b1480610e6757506005836005811115610e6557fe5b145b8015610e9357506004826005811115610e7c57fe5b1480610e9357506005826005811115610e9157fe5b145b15610ea057506000610310565b816005811115610eac57fe5b836005811115610eb857fe5b1115610ec657506002610310565b50600192915050565b83610ee557610ee0888888886110d0565b610749565b61074988888888878787611323565b825160408082015160208082015191518188015185516060870151805190850151878c01519590980151965195976001600160a01b03909416967fdddcdb07e460849cf04a4445b7af9faf01b7f5c7ba75deaf969ac5ed830312c396610f669694959394929392918b918d9190612342565b60405180910390a3505050565b6000808590506000610feb6040518060400160405280601a81526020017f19457468657265756d205369676e6564204d6573736167653a0a000000000000815250610fbe8451611628565b60408051600080825260208201818152828401828152606084019283526080840190945288939091611700565b90506001818051906020012087878760405160008152602001604052604051808581526020018460ff1681526020018381526020018281526020019450505050506020604051602081039080840390855afa15801561104e573d6000803e3d6000fd5b5050604051601f19015198975050505050505050565b60008282018381101561030d576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b600061030d6127106105b28585610c35565b6001846040015160058111156110e257fe5b14156111275760405181906001600160a01b0382169085156108fc029086906000818181858888f19350505050158015611120573d6000803e3d6000fd5b505061131d565b60028460400151600581111561113957fe5b14156111ce576020840151156111615760405162461bcd60e51b81526004016106139061222c565b600554845160405163776062c360e01b81526001600160a01b039092169163776062c3916111979186908690899060040161204e565b600060405180830381600087803b1580156111b157600080fd5b505af11580156111c5573d6000803e3d6000fd5b5050505061131d565b6004846040015160058111156111e057fe5b141561124157826001146112065760405162461bcd60e51b81526004016106139061210f565b60035484516020860151604051637b84dc8360e11b81526001600160a01b039093169263f709b906926111979290918791879160040161204e565b60058460400151600581111561125357fe5b14156112b257826001146112795760405162461bcd60e51b81526004016106139061210f565b60048054855160208701516040516321143af960e21b81526001600160a01b0390931693638450ebe4936111979392889288920161204e565b60035484516020860151604051639c1c2ee960e01b81526001600160a01b0390931692639c1c2ee9926112ef929091879187918a9060040161200b565b600060405180830381600087803b15801561130957600080fd5b505af1158015610749573d6000803e3d6000fd5b50505050565b600061133288878987876119be565b905060038260400151600581111561134657fe5b1480156113d4575081516040516301ffc9a760e01b81526001600160a01b03909116906301ffc9a79061138490632dde656160e21b90600401611fde565b60206040518083038186803b15801561139c57600080fd5b505afa1580156113b0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113d49190611d0b565b8061149457506004826040015160058111156113ec57fe5b1480611407575060058260400151600581111561140557fe5b145b8015611494575081516040516301ffc9a760e01b81526001600160a01b03909116906301ffc9a79061144490632dde656160e21b90600401611fde565b60206040518083038186803b15801561145c57600080fd5b505afa158015611470573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114949190611d0b565b1561161b578151602083015160405163b9c4d9fb60e01b81526000916001600160a01b0384169163b9c4d9fb916114cd91600401612339565b60006040518083038186803b1580156114e557600080fd5b505afa1580156114f9573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526115219190810190611be9565b90506000826001600160a01b0316630ebd4c7f86602001516040518263ffffffff1660e01b81526004016115559190612339565b60006040518083038186803b15801561156d57600080fd5b505afa158015611581573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526115a99190810190611c87565b905081518151146115b957600080fd5b60005b8151811015611616576000806115e6878e8686815181106115d957fe5b6020026020010151611a1e565b9150915081965061160c8e828e8887815181106115ff57fe5b60200260200101516110d0565b50506001016115bc565b505050505b84610e06898389846110d0565b60608161164d57506040805180820190915260018152600360fc1b60208201526102f0565b8160005b811561166557600101600a82049150611651565b60008167ffffffffffffffff8111801561167e57600080fd5b506040519080825280601f01601f1916602001820160405280156116a9576020820181803683370190505b50905060001982015b85156116f757600a860660300160f81b828280600190039350815181106116d557fe5b60200101906001600160f81b031916908160001a905350600a860495506116b2565b50949350505050565b6060600082518451865188518a518c518e5101010101010167ffffffffffffffff8111801561172e57600080fd5b506040519080825280601f01601f191660200182016040528015611759576020820181803683370190505b5090506000805b8a518110156117b1578a818151811061177557fe5b602001015160f81c60f81b83838060010194508151811061179257fe5b60200101906001600160f81b031916908160001a905350600101611760565b5060005b8951811015611806578981815181106117ca57fe5b602001015160f81c60f81b8383806001019450815181106117e757fe5b60200101906001600160f81b031916908160001a9053506001016117b5565b5060005b885181101561185b5788818151811061181f57fe5b602001015160f81c60f81b83838060010194508151811061183c57fe5b60200101906001600160f81b031916908160001a90535060010161180a565b5060005b87518110156118b05787818151811061187457fe5b602001015160f81c60f81b83838060010194508151811061189157fe5b60200101906001600160f81b031916908160001a90535060010161185f565b5060005b8651811015611905578681815181106118c957fe5b602001015160f81c60f81b8383806001019450815181106118e657fe5b60200101906001600160f81b031916908160001a9053506001016118b4565b5060005b855181101561195a5785818151811061191e57fe5b602001015160f81c60f81b83838060010194508151811061193b57fe5b60200101906001600160f81b031916908160001a905350600101611909565b5060005b84518110156119af5784818151811061197357fe5b602001015160f81c60f81b83838060010194508151811061199057fe5b60200101906001600160f81b031916908160001a90535060010161195e565b50909998505050505050505050565b60008060006119ce868787611a1e565b909250905060006119df87866110be565b905060006119ed8284611064565b90508015611a1057600154611a10908b9083908c906001600160a01b03166110d0565b509198975050505050505050565b600080611a3485611a2f86866110be565b611a40565b91509150935093915050565b60008082841115611a5657505080820381611a5d565b5060009050825b9250929050565b8035600681106102f057600080fd5b600060608284031215611a84578081fd5b6040516060810181811067ffffffffffffffff82111715611aa157fe5b6040529050808235611ab2816123cb565b815260208381013590820152611aca60408401611a64565b60408201525092915050565b60006101008284031215611ae8578081fd5b6040516080810181811067ffffffffffffffff82111715611b0557fe5b6040529050808235611b16816123cb565b815260208381013590820152611b2f8460408501611a73565b6040820152611b418460a08501611a73565b60608201525092915050565b60006101608284031215611b5f578081fd5b6040516080810181811067ffffffffffffffff82111715611b7c57fe5b604052905080611b8c8484611ad6565b81526101008301356020820152610120830135604082015261014083013560608201525092915050565b600060608284031215611bc7578081fd5b50919050565b600060208284031215611bde578081fd5b813561030d816123cb565b60006020808385031215611bfb578182fd5b825167ffffffffffffffff811115611c11578283fd5b8301601f81018513611c21578283fd5b8051611c34611c2f826123ad565b612389565b8181528381019083850185840285018601891015611c50578687fd5b8694505b83851015611c7b578051611c67816123cb565b835260019490940193918501918501611c54565b50979650505050505050565b60006020808385031215611c99578182fd5b825167ffffffffffffffff811115611caf578283fd5b8301601f81018513611cbf578283fd5b8051611ccd611c2f826123ad565b8181528381019083850185840285018601891015611ce9578687fd5b8694505b83851015611c7b578051835260019490940193918501918501611ced565b600060208284031215611d1c578081fd5b8151801515811461030d578182fd5b600060208284031215611d3c578081fd5b61030d82611a64565b600060608284031215611d56578081fd5b61030d8383611a73565b60006101008284031215611bc7578081fd5b60006101008284031215611d84578081fd5b61030d8383611ad6565b600080600080600080868803610280811215611da8578283fd5b61016080821215611db7578384fd5b889750611dc68a828b01611bb6565b965050506101c08701359350611de0886101e08901611bb6565b92506102408701359150610260870135611df9816123cb565b809150509295509295509295565b60006101608284031215611e19578081fd5b61030d8383611b4d565b6000806101808385031215611e36578182fd5b611e408484611b4d565b94610160939093013593505050565b600060608284031215611e60578081fd5b6040516060810181811067ffffffffffffffff82111715611e7d57fe5b604052823560ff81168114611e90578283fd5b8152602083810135908201526040928301359281019290925250919050565b600060208284031215611ec0578081fd5b5051919050565b60068110611ed157fe5b9052565b8035611ee0816123cb565b6001600160a01b0316825260208181013590830152611f0160408201611a64565b610c306040840182611ec7565b6001600160a01b038151168252602081015160208301526040810151610c306040840182611ec7565b6001600160a01b038151168252602081015160208301526040810151611f606040840182611f0e565b506060810151610c3060a0840182611f0e565b611f7e828251611f37565b602081015161010083015260408101516101208301526060015161014090910152565b6001600160a01b0391909116815260200190565b6001600160a01b0394851681529290931660208301526040820152606081019190915260800190565b7fffffffff0000000000000000000000000000000000000000000000000000000091909116815260200190565b6001600160a01b03958616815293851660208501529190931660408301526060820192909252608081019190915260c060a0820181905260009082015260e00190565b6001600160a01b039485168152928416602084015292166040820152606081019190915260800190565b6000602080835283518082850152825b818110156120a457858101830151858201604001528201612088565b818111156120b55783604083870101525b50601f01601f1916929092016040019392505050565b60208082526024908201527f6e6f7420656e6f7567682073746f636b206f66206f7264657220666f7220627560408201526379696e6760e01b606082015260800190565b6020808252601d908201527f76616c75652073686f756c64206265203120666f72204552432d373231000000604082015260600190565b60208082526013908201527f696e636f7272656374207369676e617475726500000000000000000000000000604082015260600190565b6020808252601d908201527f696e636f727265637420627579657220666565207369676e6174757265000000604082015260600190565b60208082526021908201527f455448206973206e6f7420737570706f72746564206f6e2073656c6c207369646040820152606560f81b606082015260800190565b6020808252600c908201527f6e6f7420616e206f776e65720000000000000000000000000000000000000000604082015260600190565b60208082526013908201527f746f6b656e49642073686f756c64206265203000000000000000000000000000604082015260600190565b60208082526016908201527f6d73672e76616c756520697320696e636f727265637400000000000000000000604082015260600190565b610120810183356122aa816123cb565b6001600160a01b038116835250602084013560208301526122d16040830160408601611ed5565b6122e160a0830160a08601611ed5565b826101008301529392505050565b61010081016103108284611f37565b61012081016122e18285611f37565b61016081016103108284611f73565b610180810161232b8285611f73565b826101608301529392505050565b90815260200190565b9788526001600160a01b03968716602089015294861660408801526060870193909352608086019190915290921660a084015260c083019190915260e08201526101000190565b60405181810167ffffffffffffffff811182821017156123a557fe5b604052919050565b600067ffffffffffffffff8211156123c157fe5b5060209081020190565b6001600160a01b03811681146123e057600080fd5b5056fe4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061646472657373536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f77a164736f6c6343000706000a",
  "deployedBytecode": "0x6080604052600436106100f35760003560e01c8063715018a61161008a578063c19d93fb11610059578063c19d93fb14610243578063ca120b1f14610258578063f2fde38b14610278578063fee03e9e14610298576100f3565b8063715018a6146101f15780638da5cb5b146102065780639704dc441461021b5780639cec639214610230576100f3565b806338af3eed116100c657806338af3eed146101925780634df97bc5146101a757806355d5d326146101bc5780636e667db3146101dc576100f3565b806302329e10146100f8578063049944b6146101235780631b4c9874146101505780631c31f71014610170575b600080fd5b34801561010457600080fd5b5061010d6102ad565b60405161011a9190611fa1565b60405180910390f35b34801561012f57600080fd5b5061014361013e366004611e07565b6102bc565b60405161011a9190612078565b34801561015c57600080fd5b5061014361016b366004611e23565b6102f5565b34801561017c57600080fd5b5061019061018b366004611bcd565b610316565b005b34801561019e57600080fd5b5061010d6103ac565b3480156101b357600080fd5b5061010d6103bb565b3480156101c857600080fd5b506101906101d7366004611bcd565b6103ca565b3480156101e857600080fd5b5061010d610460565b3480156101fd57600080fd5b5061019061046f565b34801561021257600080fd5b5061010d61052d565b34801561022757600080fd5b5061010d61053c565b61019061023e366004611d8e565b61054b565b34801561024f57600080fd5b5061010d610753565b34801561026457600080fd5b50610190610273366004611d60565b610762565b34801561028457600080fd5b50610190610293366004611bcd565b610870565b3480156102a457600080fd5b5061010d610984565b6004546001600160a01b031681565b60606102ed826040516020016102d2919061230d565b60405160208183030381529060405280519060200120610993565b90505b919050565b606061030d83836040516020016102d292919061231c565b90505b92915050565b61031e610ab4565b6001600160a01b031661032f61052d565b6001600160a01b03161461038a576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b600180546001600160a01b0319166001600160a01b0392909216919091179055565b6001546001600160a01b031681565b6002546001600160a01b031681565b6103d2610ab4565b6001600160a01b03166103e361052d565b6001600160a01b03161461043e576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b600280546001600160a01b0319166001600160a01b0392909216919091179055565b6003546001600160a01b031681565b610477610ab4565b6001600160a01b031661048861052d565b6001600160a01b0316146104e3576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080546001600160a01b0319169055565b6000546001600160a01b031690565b6007546001600160a01b031681565b61057161055d36889003880188611e07565b61056c36889003880188611e4f565b610ab8565b61059861058336889003880188611e07565b8561059336879003870187611e4f565b610bdf565b60006105b86101008801356105b26101208a013586610c35565b90610c8e565b90506105d86105cc36899003890189611d72565b88610100013585610cf5565b60016105ea60a0890160808a01611d2b565b60058111156105f557fe5b141561061c5760405162461bcd60e51b8152600401610613906121b4565b60405180910390fd5b600161062f610100890160e08a01611d2b565b600581111561063a57fe5b141561064a5761064a8186610e11565b600061067561065f60a08a0160808b01611d2b565b6106706101008b0160e08c01611d2b565b610e40565b90506001600160a01b038316610689573392505b6106df61069e368a90038a0160408b01611d45565b856106ac60208c018c611bcd565b8660018660028111156106bb57fe5b148b8e61014001358f60000160a0018036038101906106da9190611d45565b610ecf565b6107306106f4368a90038a0160a08b01611d45565b833361070360208d018d611bcd565b600286600281111561071157fe5b148d61014001358c8f6000016040018036038101906106da9190611d45565b610749610742368a90038a018a611e07565b8585610ef4565b5050505050505050565b6006546001600160a01b031681565b336107706020830183611bcd565b6001600160a01b0316146107965760405162461bcd60e51b8152600401610613906121f5565b600654604051631d03b74d60e11b81526001600160a01b0390911690633a076e9a906107ca9084906000199060040161229a565b600060405180830381600087803b1580156107e457600080fd5b505af11580156107f8573d6000803e3d6000fd5b50505060608201803591506108109060408401611bcd565b6001600160a01b03167fbfe0e802e586c99960de1a111c80f598b281996d65080d74dbe29986f55b274a3361084b60c0860160a08701611bcd565b60405161086592919060c088013590602089013590611fb5565b60405180910390a350565b610878610ab4565b6001600160a01b031661088961052d565b6001600160a01b0316146108e4576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b6001600160a01b0381166109295760405162461bcd60e51b81526004018080602001828103825260268152602001806123e46026913960400191505060405180910390fd5b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b6005546001600160a01b031681565b604080518082018252601081527f30313233343536373839616263646566000000000000000000000000000000006020820152815182815260608181018452926000919060208201818036833701905050905060005b6020811015610aac57826004868360208110610a0157fe5b1a60f81b6001600160f81b031916901c60f81c60ff1681518110610a2157fe5b602001015160f81c60f81b828260020281518110610a3b57fe5b60200101906001600160f81b031916908160001a90535082858260208110610a5f57fe5b825191901a600f16908110610a7057fe5b602001015160f81c60f81b828260020260010181518110610a8d57fe5b60200101906001600160f81b031916908160001a9053506001016109e9565b509392505050565b3390565b805160ff16158015610acc57506020810151155b8015610ada57506040810151155b15610b8057600754604051632aee7a3160e01b81526001600160a01b0390911690632aee7a3190610b0f90859060040161230d565b60206040518083038186803b158015610b2757600080fd5b505afa158015610b3b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b5f9190611d0b565b610b7b5760405162461bcd60e51b815260040161061390612146565b610bdb565b8160000151600001516001600160a01b0316610bb5826000015183602001518460400151610bad876102bc565b929190610f73565b6001600160a01b031614610bdb5760405162461bcd60e51b815260040161061390612146565b5050565b6002548151602083015160408401516001600160a01b0390931692610c0a929190610bad88886102f5565b6001600160a01b031614610c305760405162461bcd60e51b81526004016106139061217d565b505050565b600082610c4457506000610310565b82820282848281610c5157fe5b041461030d5760405162461bcd60e51b815260040180806020018281038252602181526020018061240a6021913960400191505060405180910390fd5b6000808211610ce4576040805162461bcd60e51b815260206004820152601a60248201527f536166654d6174683a206469766973696f6e206279207a65726f000000000000604482015290519081900360640190fd5b818381610ced57fe5b049392505050565b6006546040516303ec000360e61b81526000916001600160a01b03169063fb0000c090610d269087906004016122ef565b60206040518083038186803b158015610d3e57600080fd5b505afa158015610d52573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d769190611eaf565b90506000610d848284611064565b905083811115610da65760405162461bcd60e51b8152600401610613906120cb565b600654604051631d03b74d60e11b81526001600160a01b0390911690633a076e9a90610dd890889085906004016122fe565b600060405180830381600087803b158015610df257600080fd5b505af1158015610e06573d6000803e3d6000fd5b505050505050505050565b6000610e1d83836110be565b90508083013414610c305760405162461bcd60e51b815260040161061390612263565b60006004836005811115610e5057fe5b1480610e6757506005836005811115610e6557fe5b145b8015610e9357506004826005811115610e7c57fe5b1480610e9357506005826005811115610e9157fe5b145b15610ea057506000610310565b816005811115610eac57fe5b836005811115610eb857fe5b1115610ec657506002610310565b50600192915050565b83610ee557610ee0888888886110d0565b610749565b61074988888888878787611323565b825160408082015160208082015191518188015185516060870151805190850151878c01519590980151965195976001600160a01b03909416967fdddcdb07e460849cf04a4445b7af9faf01b7f5c7ba75deaf969ac5ed830312c396610f669694959394929392918b918d9190612342565b60405180910390a3505050565b6000808590506000610feb6040518060400160405280601a81526020017f19457468657265756d205369676e6564204d6573736167653a0a000000000000815250610fbe8451611628565b60408051600080825260208201818152828401828152606084019283526080840190945288939091611700565b90506001818051906020012087878760405160008152602001604052604051808581526020018460ff1681526020018381526020018281526020019450505050506020604051602081039080840390855afa15801561104e573d6000803e3d6000fd5b5050604051601f19015198975050505050505050565b60008282018381101561030d576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b600061030d6127106105b28585610c35565b6001846040015160058111156110e257fe5b14156111275760405181906001600160a01b0382169085156108fc029086906000818181858888f19350505050158015611120573d6000803e3d6000fd5b505061131d565b60028460400151600581111561113957fe5b14156111ce576020840151156111615760405162461bcd60e51b81526004016106139061222c565b600554845160405163776062c360e01b81526001600160a01b039092169163776062c3916111979186908690899060040161204e565b600060405180830381600087803b1580156111b157600080fd5b505af11580156111c5573d6000803e3d6000fd5b5050505061131d565b6004846040015160058111156111e057fe5b141561124157826001146112065760405162461bcd60e51b81526004016106139061210f565b60035484516020860151604051637b84dc8360e11b81526001600160a01b039093169263f709b906926111979290918791879160040161204e565b60058460400151600581111561125357fe5b14156112b257826001146112795760405162461bcd60e51b81526004016106139061210f565b60048054855160208701516040516321143af960e21b81526001600160a01b0390931693638450ebe4936111979392889288920161204e565b60035484516020860151604051639c1c2ee960e01b81526001600160a01b0390931692639c1c2ee9926112ef929091879187918a9060040161200b565b600060405180830381600087803b15801561130957600080fd5b505af1158015610749573d6000803e3d6000fd5b50505050565b600061133288878987876119be565b905060038260400151600581111561134657fe5b1480156113d4575081516040516301ffc9a760e01b81526001600160a01b03909116906301ffc9a79061138490632dde656160e21b90600401611fde565b60206040518083038186803b15801561139c57600080fd5b505afa1580156113b0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113d49190611d0b565b8061149457506004826040015160058111156113ec57fe5b1480611407575060058260400151600581111561140557fe5b145b8015611494575081516040516301ffc9a760e01b81526001600160a01b03909116906301ffc9a79061144490632dde656160e21b90600401611fde565b60206040518083038186803b15801561145c57600080fd5b505afa158015611470573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114949190611d0b565b1561161b578151602083015160405163b9c4d9fb60e01b81526000916001600160a01b0384169163b9c4d9fb916114cd91600401612339565b60006040518083038186803b1580156114e557600080fd5b505afa1580156114f9573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526115219190810190611be9565b90506000826001600160a01b0316630ebd4c7f86602001516040518263ffffffff1660e01b81526004016115559190612339565b60006040518083038186803b15801561156d57600080fd5b505afa158015611581573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526115a99190810190611c87565b905081518151146115b957600080fd5b60005b8151811015611616576000806115e6878e8686815181106115d957fe5b6020026020010151611a1e565b9150915081965061160c8e828e8887815181106115ff57fe5b60200260200101516110d0565b50506001016115bc565b505050505b84610e06898389846110d0565b60608161164d57506040805180820190915260018152600360fc1b60208201526102f0565b8160005b811561166557600101600a82049150611651565b60008167ffffffffffffffff8111801561167e57600080fd5b506040519080825280601f01601f1916602001820160405280156116a9576020820181803683370190505b50905060001982015b85156116f757600a860660300160f81b828280600190039350815181106116d557fe5b60200101906001600160f81b031916908160001a905350600a860495506116b2565b50949350505050565b6060600082518451865188518a518c518e5101010101010167ffffffffffffffff8111801561172e57600080fd5b506040519080825280601f01601f191660200182016040528015611759576020820181803683370190505b5090506000805b8a518110156117b1578a818151811061177557fe5b602001015160f81c60f81b83838060010194508151811061179257fe5b60200101906001600160f81b031916908160001a905350600101611760565b5060005b8951811015611806578981815181106117ca57fe5b602001015160f81c60f81b8383806001019450815181106117e757fe5b60200101906001600160f81b031916908160001a9053506001016117b5565b5060005b885181101561185b5788818151811061181f57fe5b602001015160f81c60f81b83838060010194508151811061183c57fe5b60200101906001600160f81b031916908160001a90535060010161180a565b5060005b87518110156118b05787818151811061187457fe5b602001015160f81c60f81b83838060010194508151811061189157fe5b60200101906001600160f81b031916908160001a90535060010161185f565b5060005b8651811015611905578681815181106118c957fe5b602001015160f81c60f81b8383806001019450815181106118e657fe5b60200101906001600160f81b031916908160001a9053506001016118b4565b5060005b855181101561195a5785818151811061191e57fe5b602001015160f81c60f81b83838060010194508151811061193b57fe5b60200101906001600160f81b031916908160001a905350600101611909565b5060005b84518110156119af5784818151811061197357fe5b602001015160f81c60f81b83838060010194508151811061199057fe5b60200101906001600160f81b031916908160001a90535060010161195e565b50909998505050505050505050565b60008060006119ce868787611a1e565b909250905060006119df87866110be565b905060006119ed8284611064565b90508015611a1057600154611a10908b9083908c906001600160a01b03166110d0565b509198975050505050505050565b600080611a3485611a2f86866110be565b611a40565b91509150935093915050565b60008082841115611a5657505080820381611a5d565b5060009050825b9250929050565b8035600681106102f057600080fd5b600060608284031215611a84578081fd5b6040516060810181811067ffffffffffffffff82111715611aa157fe5b6040529050808235611ab2816123cb565b815260208381013590820152611aca60408401611a64565b60408201525092915050565b60006101008284031215611ae8578081fd5b6040516080810181811067ffffffffffffffff82111715611b0557fe5b6040529050808235611b16816123cb565b815260208381013590820152611b2f8460408501611a73565b6040820152611b418460a08501611a73565b60608201525092915050565b60006101608284031215611b5f578081fd5b6040516080810181811067ffffffffffffffff82111715611b7c57fe5b604052905080611b8c8484611ad6565b81526101008301356020820152610120830135604082015261014083013560608201525092915050565b600060608284031215611bc7578081fd5b50919050565b600060208284031215611bde578081fd5b813561030d816123cb565b60006020808385031215611bfb578182fd5b825167ffffffffffffffff811115611c11578283fd5b8301601f81018513611c21578283fd5b8051611c34611c2f826123ad565b612389565b8181528381019083850185840285018601891015611c50578687fd5b8694505b83851015611c7b578051611c67816123cb565b835260019490940193918501918501611c54565b50979650505050505050565b60006020808385031215611c99578182fd5b825167ffffffffffffffff811115611caf578283fd5b8301601f81018513611cbf578283fd5b8051611ccd611c2f826123ad565b8181528381019083850185840285018601891015611ce9578687fd5b8694505b83851015611c7b578051835260019490940193918501918501611ced565b600060208284031215611d1c578081fd5b8151801515811461030d578182fd5b600060208284031215611d3c578081fd5b61030d82611a64565b600060608284031215611d56578081fd5b61030d8383611a73565b60006101008284031215611bc7578081fd5b60006101008284031215611d84578081fd5b61030d8383611ad6565b600080600080600080868803610280811215611da8578283fd5b61016080821215611db7578384fd5b889750611dc68a828b01611bb6565b965050506101c08701359350611de0886101e08901611bb6565b92506102408701359150610260870135611df9816123cb565b809150509295509295509295565b60006101608284031215611e19578081fd5b61030d8383611b4d565b6000806101808385031215611e36578182fd5b611e408484611b4d565b94610160939093013593505050565b600060608284031215611e60578081fd5b6040516060810181811067ffffffffffffffff82111715611e7d57fe5b604052823560ff81168114611e90578283fd5b8152602083810135908201526040928301359281019290925250919050565b600060208284031215611ec0578081fd5b5051919050565b60068110611ed157fe5b9052565b8035611ee0816123cb565b6001600160a01b0316825260208181013590830152611f0160408201611a64565b610c306040840182611ec7565b6001600160a01b038151168252602081015160208301526040810151610c306040840182611ec7565b6001600160a01b038151168252602081015160208301526040810151611f606040840182611f0e565b506060810151610c3060a0840182611f0e565b611f7e828251611f37565b602081015161010083015260408101516101208301526060015161014090910152565b6001600160a01b0391909116815260200190565b6001600160a01b0394851681529290931660208301526040820152606081019190915260800190565b7fffffffff0000000000000000000000000000000000000000000000000000000091909116815260200190565b6001600160a01b03958616815293851660208501529190931660408301526060820192909252608081019190915260c060a0820181905260009082015260e00190565b6001600160a01b039485168152928416602084015292166040820152606081019190915260800190565b6000602080835283518082850152825b818110156120a457858101830151858201604001528201612088565b818111156120b55783604083870101525b50601f01601f1916929092016040019392505050565b60208082526024908201527f6e6f7420656e6f7567682073746f636b206f66206f7264657220666f7220627560408201526379696e6760e01b606082015260800190565b6020808252601d908201527f76616c75652073686f756c64206265203120666f72204552432d373231000000604082015260600190565b60208082526013908201527f696e636f7272656374207369676e617475726500000000000000000000000000604082015260600190565b6020808252601d908201527f696e636f727265637420627579657220666565207369676e6174757265000000604082015260600190565b60208082526021908201527f455448206973206e6f7420737570706f72746564206f6e2073656c6c207369646040820152606560f81b606082015260800190565b6020808252600c908201527f6e6f7420616e206f776e65720000000000000000000000000000000000000000604082015260600190565b60208082526013908201527f746f6b656e49642073686f756c64206265203000000000000000000000000000604082015260600190565b60208082526016908201527f6d73672e76616c756520697320696e636f727265637400000000000000000000604082015260600190565b610120810183356122aa816123cb565b6001600160a01b038116835250602084013560208301526122d16040830160408601611ed5565b6122e160a0830160a08601611ed5565b826101008301529392505050565b61010081016103108284611f37565b61012081016122e18285611f37565b61016081016103108284611f73565b610180810161232b8285611f73565b826101608301529392505050565b90815260200190565b9788526001600160a01b03968716602089015294861660408801526060870193909352608086019190915290921660a084015260c083019190915260e08201526101000190565b60405181810167ffffffffffffffff811182821017156123a557fe5b604052919050565b600067ffffffffffffffff8211156123c157fe5b5060209081020190565b6001600160a01b03811681146123e057600080fd5b5056fe4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061646472657373536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f77a164736f6c6343000706000a",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/exchange/ExchangeV1.sol:ExchangeV1",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 4615,
        "contract": "contracts/exchange/ExchangeV1.sol:ExchangeV1",
        "label": "beneficiary",
        "offset": 0,
        "slot": "1",
        "type": "t_address_payable"
      },
      {
        "astId": 4617,
        "contract": "contracts/exchange/ExchangeV1.sol:ExchangeV1",
        "label": "buyerFeeSigner",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 4619,
        "contract": "contracts/exchange/ExchangeV1.sol:ExchangeV1",
        "label": "transferProxy",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(TransferProxy)5753"
      },
      {
        "astId": 4621,
        "contract": "contracts/exchange/ExchangeV1.sol:ExchangeV1",
        "label": "transferProxyForDeprecated",
        "offset": 0,
        "slot": "4",
        "type": "t_contract(TransferProxyForDeprecated)5782"
      },
      {
        "astId": 4623,
        "contract": "contracts/exchange/ExchangeV1.sol:ExchangeV1",
        "label": "erc20TransferProxy",
        "offset": 0,
        "slot": "5",
        "type": "t_contract(ERC20TransferProxy)5695"
      },
      {
        "astId": 4625,
        "contract": "contracts/exchange/ExchangeV1.sol:ExchangeV1",
        "label": "state",
        "offset": 0,
        "slot": "6",
        "type": "t_contract(ExchangeStateV1)4530"
      },
      {
        "astId": 4627,
        "contract": "contracts/exchange/ExchangeV1.sol:ExchangeV1",
        "label": "ordersHolder",
        "offset": 0,
        "slot": "7",
        "type": "t_contract(ExchangeOrdersHolderV1)4456"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_address_payable": {
        "encoding": "inplace",
        "label": "address payable",
        "numberOfBytes": "20"
      },
      "t_contract(ERC20TransferProxy)5695": {
        "encoding": "inplace",
        "label": "contract ERC20TransferProxy",
        "numberOfBytes": "20"
      },
      "t_contract(ExchangeOrdersHolderV1)4456": {
        "encoding": "inplace",
        "label": "contract ExchangeOrdersHolderV1",
        "numberOfBytes": "20"
      },
      "t_contract(ExchangeStateV1)4530": {
        "encoding": "inplace",
        "label": "contract ExchangeStateV1",
        "numberOfBytes": "20"
      },
      "t_contract(TransferProxy)5753": {
        "encoding": "inplace",
        "label": "contract TransferProxy",
        "numberOfBytes": "20"
      },
      "t_contract(TransferProxyForDeprecated)5782": {
        "encoding": "inplace",
        "label": "contract TransferProxyForDeprecated",
        "numberOfBytes": "20"
      }
    }
  }
}